import sys

import numpy as np
import pandas as pd
from scipy.linalg import solve

sys.path.append("../../../r1basis")
from r1basis import *

sys.path.append("../../../src_py/driv_grid")
from driv_grid import solve_driv

L = 1
ene = 0.5
n = 1000   ## grid num
h = 0.1    ## grid width
psi_csv = "psi.csv"
grid_csv= "grid.csv"
outname = "res.out"
f = open(outname, "w")

def zs_et_from_num(num, z0=0.01, z1=30.0):
    return np.array([z0 * (z1/z0)**(n*1.0/(num-1)) for n in range(num)])

def get_basis():    
    cs = range(5)
    zs = range(5)
    cs[0] = [0.018726847246512771+0.00611099089584598j, 
             0.153464957309072652+0.02727712883064063j,
             0.327895674651582729+0.01929180187680413j,
             0.327691935984031876-0.01110319432600929j, 
           0.202033912052120845-0.02061113768180121j, 
           0.089605651093859000-0.01333037723681930j,
           0.030965186447966525-0.00553204376943544j,
           0.008537222433099783-0.00167700947247151j,
           0.001810304332788301-0.00037333467747627j,
           0.000252245870045373-0.00005326114065688j]
    
    zs[0] = [ 0.03568076670822819-0.002373258012816j,
              0.06430733465748137-0.003319704959664j,
              0.11488887773072500-0.004418013377873j,
              0.20992112652586682-0.005727818001053j,
              0.39840236648611778-0.007319331253538j,
              0.79656626607173403-0.009306531104672j,
              1.70934980146474940-0.011895361246509j,      
              4.05707136227060136-0.015505717988011j,
              11.2960178368788410-0.02119413360426j,
              43.2352101539180026-0.03316699396395j]

    cs[1] = [-0.0022921856051479+0.019691227487074j, 
             0.09620971794609700+0.1379447140418817j, 
             0.35349030280666058+0.1292460014495092j, 
             0.38651974980486431-0.0536558090333081j, 
             0.21574026281235855-0.1176387815014979j, 
             0.08074731258154585-0.074649724786754j, 
             0.02359545094428798-0.029911186454235j, 
             0.00571628606243257-0.0088141433259034j, 
             0.00111556528775794-0.001927550136316j,
             0.00014855520117007-0.000272408124343j]

    zs[1] = [0.03474720645958133-0.012382422321377j, 
           0.06279928124623840-0.017274343848528j , 
           0.11209358109887483-0.0229817867170113j , 
           0.20440179395174296-0.029823043071523j , 
           0.38722559362838292-0.038153968941482j , 
           0.77329585004664799-0.048553824312994j , 
           1.65834437442678362-0.062087321586190j , 
           3.93483473748183592-0.080942880973133j , 
           10.9543282878562888-0.11063511352584j,
           41.9254718023117682-0.173116088690049j]

    cs[2] = [0.00174928158861797+0.0197866201345356j,
             0.222741876536-0.05797331259969786222106j,
             -0.1174080013830970+0.6812886227630672j,
             -0.8763876075347987+0.1398947185332012j,
             -0.4304822975747529+0.4534560376476238j,
             -0.0192403034672090+0.2881962782785468j,
             0.03712255820086444+0.0919464790852020j,
             0.016277993200+0.02133429061956317962575367j,
             0.00401674561939965+0.0039132051180187j,
             0.00059347586398324+0.0004989728557532j]

    zs[2] = [
        0.02319004819899921- 0.0231023051710165534j,
        0.04255117846205558- 0.0317635382093749316j,
        0.07564477013242306- 0.0421168434824231539j,
        0.13644764987005631- 0.0548685788646383069j,
        0.25565639033359148- 0.0706587641349502407j,
        0.50647755453946571- 0.0904229276265486258j,
        1.08117085360931331- 0.1159993594420285219j,
        2.55974021164377503- 0.1514074734710874551j,
        7.11972137334581225- 0.2069460325349303957j,
        27.2401862610043543- 0.3236146083013391472j]
    
    cs[3] = [
        -0.0131531021184863 + 0.012150977226803442j,
        0.23283154675130153- 0.2648307973925822881j,
        -1.7780637102142361 + 1.035433930076772809j,
        5.11439121268518064+ 0.5614145327341338359j,
        -3.0877601497783849 - 5.504371020272190386j,
        -2.9664682186068354 + 2.848564560804136749j,
        0.85604308358254486 +1.31654997419078816333j,
        0.40261392830927869 + 0.033979139844671975340j,
        0.07039225616733824- 0.0322875525046878571j,
        0.00783042346736019- 0.0063929072086717001j]
    zs[3] = [
        0.00648725868409036- 0.0188700427023367833j,
    0.01247738225188995-0.024700294644062041118j,
    0.02197745654937422- 0.0319788025875617239j,
    0.03836625141555650- 0.0415079320460054930j,
    0.06880665127046696- 0.05419087411217315559j,
    0.13039845172081314- 0.0710656751361525176j,
    0.26877699710947910- 0.0933937025182049369j,
    0.62319420595195357- 0.1237094951842018773j,
    1.71709073767006143- 0.1698457141516809346j,
    6.54712661028661548- 0.2650930459366273226j]

    cs[4] = [
        -0.1043261704698693 + 0.022095122452433365j,
        -0.6797162150696210 - 0.699007794781109730j,
        2.83485373851706676-4.542112357811152200598j,
        17.0946786202532667+ 11.513759305654227943j,
        -44.0981648572509495 + 36.4128405295970584j,
        17.5139852355179935+ 111.39517954429991100j,
        -121.59254897215914- 89.220420963821893907j,
        124.1439758137031967 + 16.6727477528762585j,
        -55.0388857148084214 + 1.00860315305838467j,
        8.84175777879791599+ 3.1765975310903171920j]
    zs[4] = [
        0.00055273899699631- 0.0077609029000392359j,
        0.00105070213614737- 0.0090632980507965273j,
        0.00173368850634886- 0.0107244544890568984j,
        0.00276114992592513- 0.0129061849147317497j,
        0.00440704037946970- 0.0158805456034142999j,
        0.00723001967979162- 0.02012303992315912566j,
        0.01251931925069259- 0.0265312545051000442j,
        0.02376572659111177- 0.0369814516364326073j,
        0.05306652587237127- 0.0560379391781409226j,
        0.16736996341531542- 0.0992844321811802687j]
    
    b = STOs()
    for (c, z) in zip(cs, zs):
        b1 = LC_STOs()
        for (c0, z0) in zip(c, z):
            b1.add(c0, 2, z0)
        b.add(b1)
    b.setup()
    return b
        
def calc():
    ## optimized basis set
    b = get_basis()
    
    
    ## velocity driven term
    driv = LC_STOs()
    driv.add(-2.0, 1, 1.0)

    ## print claculation inputs
    f.write("calculation of hydrogen atom photoionization in length form\n")
    f.write("solve radial equation\n")
    f.write("(H-E)psi=driv\n")
    f.write("\n")
    f.write(">>> INPUTS >>> \n")
    f.write("L = {0}\n".format(L))
    f.write("energy = {0}\n".format(ene))
    f.write("driv = {0}\n".format(driv.str()))
    f.write("basis = \n")
    f.write("grid = ({0}, {1})".format(n, h))
    f.write(b.str())
        
    ## calculation
    d2mat = b.calc_d2_mat()
    lmat = ( d2mat* (-0.5)
             + b.calc_rm_mat(-2)* (0.5*(L*(L+1)))
             + b.calc_rm_mat(-1) * (-1.0)
             + b.calc_rm_mat(0)  * (-ene))
    mvec = b.calc_vec(driv)
    cs = solve(lmat, mvec)
    alpha = np.dot(cs, mvec)

    ## calculate by CBF
    rs = np.linspace(0, 100, 300)
    ys = np.array(b.at_r(rs, cs))
    df = pd.DataFrame([rs, ys.real, ys.imag]).T
    df.columns = ["r", "re_y", "im_y"]
    df.to_csv(psi_csv, index=False)

    ## calculate by grid
    s = lambda r: driv.at_r([r])[0]
    v = lambda r: L*(L+1)/(2.0*r*r) -1.0/r
    (rs, ys) = solve_driv(v, ene, s, n, h)
    df = pd.DataFrame([rs.real, ys.real, ys.imag]).T
    df.columns = ["r", "re_y", "im_y"]
    df.to_csv(grid_csv, index=False)

    ## print outpus
    f.write("\n>>> RESULTS >>> \n")
    f.write("psi_csv = {0}\n".format(psi_csv))
    f.write("grid_csv = {0}\n".format(grid_csv))
    f.write("cs = \n")
    for c in cs:
        f.write("{0}\n".format(c))
    f.write("alpha = {0} {1}\n".format(alpha.real, alpha.imag))

calc()
f.close()
